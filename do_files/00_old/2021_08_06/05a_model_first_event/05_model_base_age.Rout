
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # TOP COMMANDS -----
> # https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/index/
> # https://stackoverflow.com/questions/7505547/detach-all-packages-while-working-in-r
> detachAllPackages <- function() {
+         basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
+         package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
+         package.list <- setdiff(package.list,basic.packages)
+         if (length(package.list)>0)  for (package in package.list) detach(package,character.only=TRUE)
+         
+ }
> detachAllPackages()
> rm(list=ls(all=TRUE))
> 
> # FOLDERS
> setwd("/Users/jonathanlatner/Google Drive/SECCOPA/")
> # setwd("C:/Users/ba1ks6/Google Drive/SECCOPA/")
> 
> data_files = "projects/mobility/data_files/"
> tables = "projects/mobility/tables/"
> graphs = "projects/mobility/graphs/"
> results = "projects/mobility/results/"
> 
> # LIBRARY
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.6     ✔ dplyr   1.0.4
✔ tidyr   1.1.2     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(texreg)
Version:  1.37.5
Date:     2020-06-17
Author:   Philip Leifeld (University of Essex)

Consider submitting praise using the praise or praise_interactive functions.
Please cite the JSS article in your publications -- see citation("texreg").

Attaching package: ‘texreg’

The following object is masked from ‘package:tidyr’:

    extract

> library(dummies)
dummies-1.5.6 provided by Decision Patterns

> library(robumeta) #group.center
> library(beepr)
> 
> options(scipen = 999) # disable scientific notation
> 
> # load data -----
> 
> df_original <- readRDS(paste0(data_files,"df_sample_first_clean.rds"))
> 
> # df_original <- readRDS(paste0(data_files,"df_sample_first_clean_sample.rds"))
> 
> # clean data -----
> 
> df_event_t_p <- df_original %>%
+         select(country,pid,year,ln_hourly_wage,unmp,temp,perm,age,matches("event_t_p")) %>%
+         rename(event_time_pos = event_t_p_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> df_event_u_p <- df_original %>%
+         select(country,pid,year,ln_hourly_wage,unmp,temp,perm,age,matches("event_u_p")) %>%
+         rename(event_time_pos = event_u_p_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> df_event_u_t <- df_original %>%
+         select(country,pid,year,ln_hourly_wage,unmp,temp,perm,age,matches("event_u_t")) %>%
+         rename(event_time_pos = event_u_t_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> df_event_p_t <- df_original %>%
+         select(country,pid,year,ln_hourly_wage,unmp,temp,perm,age,matches("event_p_t")) %>%
+         rename(event_time_pos = event_p_t_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> # examine some data ----
> 
> # df_test <- df_event_u_p %>%
> #         filter(event_u_p_yes==1 & country == "IT") %>%
> #         select(country,pid,year,unmp,temp,perm,matches("event"))
> # with(df_test,table(event_u_p_time,event_time_pos))
> 
> # df_event_t_p %>%
> #         filter(event_t_p_yes==1 & country == "IT") %>%
> #         select(country,pid,year,unmp,temp,perm,event_t_p,event_t_p_time,event_time_pos)
> 
> # df_test <- df_event_t_p %>%
> #         filter(event_t_p_yes==1 & country == "IT") %>%
> #         select(country,pid,year,unmp,temp,perm,event_t_p,event_t_p_time,event_time_pos)
> # with(df_test,table(event_t_p_time,event_time_pos))
> 
> with(df_event_t_p,table(country,event_t_p_yes))
         event_t_p_yes
country        0      1
  AU       51516  22267
  CH       37718   2359
  DE      137811  17270
  IT       37961   1769
  JP       22584   1483
  KO       48081   5507
  NE-LISS   9621    507
  NE-LSP   16012   1406
  UK      172207  12578
> 
> # Prepare for models ----
> # Events - Temp to Perm (t_p), Perm to Temp (p_t), Unmp to Perm (u_p), and Unmp to Temp (p_t)
> 
> event <- c("t_p","p_t","u_p","u_t")
> 
> # Variables 
> 
> iv_vars_annual =   c("age + event_time_pos_1 + event_time_pos_3 + event_time_pos_4 + event_time_pos_5 + event_time_pos_6 + event_time_pos_7")
> iv_vars_biannual = c("age + event_time_pos_3 + event_time_pos_5 + event_time_pos_7")
> 
> vars_annual = c("ln_hourly_wage", "age", "event_time_pos_1", "event_time_pos_3", "event_time_pos_4", "event_time_pos_5", "event_time_pos_6", "event_time_pos_7")
> vars_biannual = c("ln_hourly_wage", "age", "event_time_pos_3", "event_time_pos_5", "event_time_pos_7")
> 
> # Countries
> country_bi <- c("NE-LSP","IT")
> country_ann <- c("AU","CH","DE","JP","KO","NE-LISS","UK")
> country_all <- c("AU","CH","DE","JP","KO","NE-LISS","UK","NE-LSP","IT")
> 
> # Models ---- 
> 
> # Biannual countries
> for(c in country_bi) {
+         print(paste0("country = ", c))
+         for (e in event) {
+                 print(paste0("event = ", e))
+                 df_event <- get(paste0("df_event_",e))
+                 
+                 df_country <- df_event %>%
+                         filter(country == c)
+                 
+                 # create year variables
+                 df_dummy <- dummy(x = df_country$year,sep = "")
+                 df_country <- cbind(df_country,df_dummy)
+                 
+                 df_dummy <- dummy(x = df_country$event_time_pos,sep = "_")
+                 df_country <- cbind(df_country,df_dummy)
+                 
+                 year <- sort(unique(df_country$year))
+                 year_vars = c()
+                 for(y in year) {
+                         year_vars <- c(year_vars,paste0("year",as.character(y)))
+                 }
+                 remove_base_year_vars <- c(year_vars[1]) # drop baseline
+                 year_vars <- year_vars [! year_vars %in% remove_base_year_vars]
+                 year_vars
+                 
+                 # Prepare data for transitory exit with individual fixed effects 
+                 vars <- c(vars_biannual,year_vars)
+                 
+                 for (v in vars) {
+                         df_country$test <- group.center(df_country[[v]], df_country$pid)
+                         df_country$test <- as.numeric(df_country$test)
+                         df_country[[v]] <- NULL
+                         names(df_country)[names(df_country) == "test"] <- paste0(v)
+                 }
+                 
+                 # create independent variables
+                 vars_all = c()
+                 for (v in vars) {
+                         vars_all <- paste(vars_all,v,"+")
+                 }
+                 vars_all <- sub("..$", "", vars_all)
+                 
+                 # model
+                 df_country <- data.frame(df_country)
+                 model <- lm(as.formula(paste0("ln_hourly_wage ~ ",vars_all)),
+                             data = df_country)
+                 
+                 assign(paste0("model_event_",e,"_country_",c),model)
+         }
+ }
[1] "country = NE-LSP"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = IT"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
There were 32 warnings (use warnings() to see them)
> 
> # Annual countries) 
> for(c in country_ann) {
+         print(paste0("country = ", c))
+         for (e in event) {
+                 print(paste0("event = ", e))
+                 df_event <- get(paste0("df_event_",e))
+                 
+                 df_country <- df_event %>%
+                         filter(country == c)
+                 
+                 # create year variables
+                 df_dummy <- dummy(x = df_country$year,sep = "")
+                 df_country <- cbind(df_country,df_dummy)
+                 
+                 df_dummy <- dummy(x = df_country$event_time_pos,sep = "_")
+                 df_country <- cbind(df_country,df_dummy)
+                 
+                 year <- sort(unique(df_country$year))
+                 year_vars = c()
+                 for(y in year) {
+                         year_vars <- c(year_vars,paste0("year",as.character(y)))
+                 }
+                 remove_base_year_vars <- c(year_vars[1]) # drop baseline
+                 year_vars <- year_vars [! year_vars %in% remove_base_year_vars]
+                 year_vars
+                 
+                 # Prepare data for transitory exit with individual fixed effects 
+                 vars <- c(vars_annual,year_vars)
+                 
+                 for (v in vars) {
+                         df_country$test <- group.center(df_country[[v]], df_country$pid)
+                         df_country$test <- as.numeric(df_country$test)
+                         df_country[[v]] <- NULL
+                         names(df_country)[names(df_country) == "test"] <- paste0(v)
+                 }
+                 
+                 # create independent variables
+                 vars_all = c()
+                 for (v in vars) {
+                         vars_all <- paste(vars_all,v,"+")
+                 }
+                 vars_all <- sub("..$", "", vars_all)
+                 
+                 # model
+                 df_country <- data.frame(df_country)
+                 model <- lm(as.formula(paste0("ln_hourly_wage ~ ",vars_all)),
+                             data = df_country)
+                 
+                 assign(paste0("model_event_",e,"_country_",c),model)
+         }
+ }
[1] "country = AU"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = CH"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = DE"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = JP"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = KO"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = NE-LISS"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = UK"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> rm(list=ls(pattern="vars"))
> rm(c,e,v,y,year,df_country,df_event,df_dummy,model)
> 
> # Tables ----
> 
> # Event by countries
> for (e in event) {
+         for(c in country_all) {
+                 
+                 model_event_country <- get(paste0("model_event_",e,"_country_",c))
+                 assign(paste0("model_",c),model_event_country)
+                 
+         }
+         
+         # print(screenreg(list(model_AU,model_CH,model_DE,model_JP,model_KO,`model_NE-LISS`,model_UK,`model_NE-LSP`,model_IT),
+         #        custom.model.names = c("AU", "CH", "DE", "JP", "KO", "NE-LISS", "UK", "NE-LSP","IT"),
+         #        custom.coef.names = c("Age","Pre event (-2)", "Event", "Post event (+1)", "Post event (+2)", "Post event (+3)", "Post event (+4)"),
+         #        table = FALSE,
+         #        include.rsquared = TRUE, include.adjrs = FALSE,include.nobs = TRUE,include.rmse=FALSE,include.groups=FALSE,
+         #        omit.coef = c("year|Intercept")))
+ 
+         texreg(list(model_AU,model_CH,model_DE,model_JP,model_KO,`model_NE-LISS`,model_UK,`model_NE-LSP`,model_IT),
+                         custom.model.names = c("AU", "CH", "DE", "JP", "KO", "NE-LISS", "UK", "NE-LSP","IT"),
+                         custom.coef.names = c("Age","Pre event (-2)", "Event", "Post event (+1)", "Post event (+2)", "Post event (+3)", "Post event (+4)"),
+                         file = paste0(tables,"table_model_2_first_output_event_",e,".tex"),
+                         table = FALSE,
+                         include.rsquared = TRUE, include.adjrs = FALSE,include.nobs = TRUE,include.rmse=FALSE,include.groups=FALSE,
+                         omit.coef = c("year|Intercept"))
+ }
The table was written to the file 'projects/mobility/tables/table_model_2_first_output_event_t_p.tex'.

The table was written to the file 'projects/mobility/tables/table_model_2_first_output_event_p_t.tex'.

The table was written to the file 'projects/mobility/tables/table_model_2_first_output_event_u_p.tex'.

The table was written to the file 'projects/mobility/tables/table_model_2_first_output_event_u_t.tex'.

> 
> # Individual countries - annual
> for(c in country_ann) {
+         
+         model_event_t_p_country <- get(paste0("model_event_t_p_country_",c))
+         model_event_u_p_country <- get(paste0("model_event_u_p_country_",c))
+         model_event_u_t_country <- get(paste0("model_event_u_t_country_",c))
+         model_event_p_t_country <- get(paste0("model_event_p_t_country_",c))
+         
+         # screenreg(list(model_event_t_p_country,model_event_t_p_country,model_event_u_p_country,model_event_u_t_country),
+         #        custom.model.names = c("Event 1 (T-P)", "Event 4 (P-T)", "Event 2 (U-P)", "Event 3 (U-T)"),
+         #        custom.coef.names = c("Age", "Pre event (-2)", "Pre event (-1)", "Event", "Post event (+1)", "Post event (+2)", "Post event (+3)", "Post event (+4)"),
+         #        table = FALSE,
+         #        include.rsquared = TRUE, include.adjrs = FALSE,include.nobs = TRUE,include.rmse=FALSE,include.groups=FALSE,
+         #        omit.coef = c("year|Intercept"))
+         
+         texreg(list(model_event_t_p_country,model_event_p_t_country,model_event_u_p_country,model_event_u_t_country),
+                custom.model.names = c("Event 1 (T-P)", "Event 4 (P-T)", "Event 2 (U-P)", "Event 3 (U-T)"),
+                custom.coef.names = c("Age", "Pre event (-2)", "Event", "Post event (+1)", "Post event (+2)", "Post event (+3)", "Post event (+4)"),
+                file = paste0(tables,"table_model_2_first_output_country_",c,".tex"),
+                table = FALSE,
+                include.rsquared = TRUE, include.adjrs = FALSE,include.nobs = TRUE,include.rmse=FALSE,include.groups=FALSE,
+                omit.coef = c("year|Intercept"))
+ }
The table was written to the file 'projects/mobility/tables/table_model_2_first_output_country_AU.tex'.

The table was written to the file 'projects/mobility/tables/table_model_2_first_output_country_CH.tex'.

The table was written to the file 'projects/mobility/tables/table_model_2_first_output_country_DE.tex'.

The table was written to the file 'projects/mobility/tables/table_model_2_first_output_country_JP.tex'.

The table was written to the file 'projects/mobility/tables/table_model_2_first_output_country_KO.tex'.

The table was written to the file 'projects/mobility/tables/table_model_2_first_output_country_NE-LISS.tex'.

The table was written to the file 'projects/mobility/tables/table_model_2_first_output_country_UK.tex'.

> 
> # Individual countries - biannual
> for(c in country_bi) {
+         
+         model_event_t_p_country <- get(paste0("model_event_t_p_country_",c))
+         model_event_u_p_country <- get(paste0("model_event_u_p_country_",c))
+         model_event_u_t_country <- get(paste0("model_event_u_t_country_",c))
+         model_event_p_t_country <- get(paste0("model_event_p_t_country_",c))
+         
+         texreg(list(model_event_t_p_country,model_event_p_t_country,model_event_u_p_country,model_event_u_t_country),
+                custom.model.names = c("Event 1 (T-P)", "Event 4 (P-T)", "Event 2 (U-P)", "Event 3 (U-T)"),
+                custom.coef.names = c("Age","Event", "Post event (+2)", "Post event (+4)"),
+                file = paste0(tables,"table_model_2_first_output_country_",c,".tex"),
+                table = FALSE,
+                include.rsquared = TRUE, include.adjrs = FALSE,include.nobs = TRUE,include.rmse=FALSE,include.groups=FALSE,
+                omit.coef = c("year|Intercept"))
+ }
The table was written to the file 'projects/mobility/tables/table_model_2_first_output_country_NE-LSP.tex'.

The table was written to the file 'projects/mobility/tables/table_model_2_first_output_country_IT.tex'.

> 
> # Predict models t_p, p_t ----
> 
> df_yhat <- data.frame()
> 
> # New data for annual countries
> 
> newdata_neg_2 = data.frame(age=0,event_time_pos_1=1,event_time_pos_2=0, # pre event
+                            event_time_pos_3=0, # event
+                            event_time_pos_4=0,event_time_pos_5=0,event_time_pos_6=0,event_time_pos_7=0, # post event
+                            year2001=0,year2002=0,year2003=0,year2004=0,year2005=0,year2006=0,year2007=0,year2008=0,year2009=0,year2010=0,
+                            year2011=0,year2012=0,year2013=0,year2014=0,year2015=0,year2016=0,year2017=0,year2018=0
+ )
> 
> # baseline
> newdata_neg_1 = data.frame(age=0,event_time_pos_1=0,event_time_pos_2=0, # pre event
+                            event_time_pos_3=0, # event
+                            event_time_pos_4=0,event_time_pos_5=0,event_time_pos_6=0,event_time_pos_7=0, # post event
+                            year2001=0,year2002=0,year2003=0,year2004=0,year2005=0,year2006=0,year2007=0,year2008=0,year2009=0,year2010=0,
+                            year2011=0,year2012=0,year2013=0,year2014=0,year2015=0,year2016=0,year2017=0,year2018=0
+ )
> 
> newdata_0 = data.frame(age=0,event_time_pos_1=0,event_time_pos_2=0, # pre event
+                        event_time_pos_3=1, # event
+                        event_time_pos_4=0,event_time_pos_5=0,event_time_pos_6=0,event_time_pos_7=0, # post event
+                        year2001=0,year2002=0,year2003=0,year2004=0,year2005=0,year2006=0,year2007=0,year2008=0,year2009=0,year2010=0,
+                        year2011=0,year2012=0,year2013=0,year2014=0,year2015=0,year2016=0,year2017=0,year2018=0
+ )
> 
> newdata_pos_1 = data.frame(age=0,event_time_pos_1=0,event_time_pos_2=0, # pre event
+                            event_time_pos_3=0, # event
+                            event_time_pos_4=1,event_time_pos_5=0,event_time_pos_6=0,event_time_pos_7=0, # post event
+                            year2001=0,year2002=0,year2003=0,year2004=0,year2005=0,year2006=0,year2007=0,year2008=0,year2009=0,year2010=0,
+                            year2011=0,year2012=0,year2013=0,year2014=0,year2015=0,year2016=0,year2017=0,year2018=0
+ )
> 
> newdata_pos_2 = data.frame(age=0,event_time_pos_1=0,event_time_pos_2=0, # pre event
+                            event_time_pos_3=0, # event
+                            event_time_pos_4=0,event_time_pos_5=1,event_time_pos_6=0,event_time_pos_7=0, # post event
+                            year2001=0,year2002=0,year2003=0,year2004=0,year2005=0,year2006=0,year2007=0,year2008=0,year2009=0,year2010=0,
+                            year2011=0,year2012=0,year2013=0,year2014=0,year2015=0,year2016=0,year2017=0,year2018=0
+ )
> 
> newdata_pos_3 = data.frame(age=0,event_time_pos_1=0,event_time_pos_2=0, # pre event
+                            event_time_pos_3=0, # event
+                            event_time_pos_4=0,event_time_pos_5=0,event_time_pos_6=1,event_time_pos_7=0, # post event
+                            year2001=0,year2002=0,year2003=0,year2004=0,year2005=0,year2006=0,year2007=0,year2008=0,year2009=0,year2010=0,
+                            year2011=0,year2012=0,year2013=0,year2014=0,year2015=0,year2016=0,year2017=0,year2018=0
+ )
> 
> newdata_pos_4 = data.frame(age=0,event_time_pos_1=0,event_time_pos_2=0, # pre event
+                            event_time_pos_3=0, # event
+                            event_time_pos_4=0,event_time_pos_5=0,event_time_pos_6=0,event_time_pos_7=1, # post event
+                            year2001=0,year2002=0,year2003=0,year2004=0,year2005=0,year2006=0,year2007=0,year2008=0,year2009=0,year2010=0,
+                            year2011=0,year2012=0,year2013=0,year2014=0,year2015=0,year2016=0,year2017=0,year2018=0
+ )
> 
> # Predict annual countries
> for(c in country_ann) {
+         for (e in event) {
+                 model_event <- get(paste0("model_event_",e,"_country_",c))
+                 print(c)
+                 print(e)
+                 
+                 yhat_neg_2 <- data.frame(predict(object = model_event,
+                                                  se.fit = TRUE,
+                                                  newdata = newdata_neg_2
+                 )) %>%
+                         select(fit,se.fit)
+                 yhat_neg_2$post <- -2
+                 
+                 yhat_neg_1 <- data.frame(predict(object = model_event,
+                                                  se.fit = TRUE,
+                                                  newdata = newdata_neg_1
+                 )) %>%
+                         select(fit,se.fit)
+                 yhat_neg_1$post <- -1
+                 
+                 yhat_0 <- data.frame(predict(object = model_event,
+                                              se.fit = TRUE,
+                                              newdata = newdata_0
+                 )) %>%
+                         select(fit,se.fit)
+                 yhat_0$post <- 0
+                 
+                 yhat_1 <- data.frame(predict(object = model_event,
+                                              se.fit = TRUE,
+                                              newdata = newdata_pos_1
+                 )) %>%
+                         select(fit,se.fit)
+                 yhat_1$post <- 1
+                 
+                 yhat_2 <- data.frame(predict(object = model_event,
+                                              se.fit = TRUE,
+                                              newdata = newdata_pos_2
+                 )) %>%
+                         select(fit,se.fit)
+                 yhat_2$post <- 2
+                 
+                 
+                 yhat_3 <- data.frame(predict(object = model_event,
+                                              se.fit = TRUE,
+                                              newdata = newdata_pos_3
+                 )) %>%
+                         select(fit,se.fit)
+                 yhat_3$post <- 3
+                 
+                 yhat_4 <- data.frame(predict(object = model_event,
+                                              se.fit = TRUE,
+                                              newdata = newdata_pos_4
+                 )) %>%
+                         select(fit,se.fit)
+                 yhat_4$post <- 4
+                 
+                 yhat <- rbind(yhat_neg_2,yhat_neg_1,yhat_0,yhat_1,yhat_2,yhat_3,yhat_4)        
+                 yhat$event <- e
+                 yhat$country <- c
+                 df_yhat <- rbind(df_yhat,yhat)
+         }
+ }
[1] "AU"
[1] "t_p"
[1] "AU"
[1] "p_t"
[1] "AU"
[1] "u_p"
[1] "AU"
[1] "u_t"
[1] "CH"
[1] "t_p"
[1] "CH"
[1] "p_t"
[1] "CH"
[1] "u_p"
[1] "CH"
[1] "u_t"
[1] "DE"
[1] "t_p"
[1] "DE"
[1] "p_t"
[1] "DE"
[1] "u_p"
[1] "DE"
[1] "u_t"
[1] "JP"
[1] "t_p"
[1] "JP"
[1] "p_t"
[1] "JP"
[1] "u_p"
[1] "JP"
[1] "u_t"
[1] "KO"
[1] "t_p"
[1] "KO"
[1] "p_t"
[1] "KO"
[1] "u_p"
[1] "KO"
[1] "u_t"
[1] "NE-LISS"
[1] "t_p"
[1] "NE-LISS"
[1] "p_t"
[1] "NE-LISS"
[1] "u_p"
[1] "NE-LISS"
[1] "u_t"
[1] "UK"
[1] "t_p"
[1] "UK"
[1] "p_t"
[1] "UK"
[1] "u_p"
[1] "UK"
[1] "u_t"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> # New data for biannual countries
> 
> # baseline
> newdata_neg_2 = data.frame(age=0,event_time_pos_1=0,event_time_pos_2=0, # pre event
+                            event_time_pos_3=0, # event
+                            event_time_pos_4=0,event_time_pos_5=0,event_time_pos_6=0,event_time_pos_7=0,event_time_pos_8=0, # post event
+                            year2001=0,year2002=0,year2003=0,year2004=0,year2005=0,year2006=0,year2007=0,year2008=0,year2009=0,year2010=0,
+                            year2011=0,year2012=0,year2013=0,year2014=0,year2015=0,year2016=0,year2017=0,year2018=0
+ )
> 
> newdata_0 = data.frame(age=0,event_time_pos_1=0,event_time_pos_2=0, # pre event
+                        event_time_pos_3=1, # event
+                        event_time_pos_4=0,event_time_pos_5=0,event_time_pos_6=0,event_time_pos_7=0,event_time_pos_8=0, # post event
+                        year2001=0,year2002=0,year2003=0,year2004=0,year2005=0,year2006=0,year2007=0,year2008=0,year2009=0,year2010=0,
+                        year2011=0,year2012=0,year2013=0,year2014=0,year2015=0,year2016=0,year2017=0,year2018=0
+ )
> 
> newdata_pos_2 = data.frame(age=0,event_time_pos_1=0,event_time_pos_2=0, # pre event
+                            event_time_pos_3=0, # event
+                            event_time_pos_4=0,event_time_pos_5=1,event_time_pos_6=0,event_time_pos_7=0,event_time_pos_8=0, # post event
+                            year2001=0,year2002=0,year2003=0,year2004=0,year2005=0,year2006=0,year2007=0,year2008=0,year2009=0,year2010=0,
+                            year2011=0,year2012=0,year2013=0,year2014=0,year2015=0,year2016=0,year2017=0,year2018=0
+ )
> 
> newdata_pos_4 = data.frame(age=0,event_time_pos_1=0,event_time_pos_2=0, # pre event
+                            event_time_pos_3=0, # event
+                            event_time_pos_4=0,event_time_pos_5=0,event_time_pos_6=0,event_time_pos_7=1,event_time_pos_8=0, # post event
+                            year2001=0,year2002=0,year2003=0,year2004=0,year2005=0,year2006=0,year2007=0,year2008=0,year2009=0,year2010=0,
+                            year2011=0,year2012=0,year2013=0,year2014=0,year2015=0,year2016=0,year2017=0,year2018=0
+ )
> 
> # Predict biannual countries
> 
> for(c in country_bi) {
+         for (e in event) {
+                 model_event <- get(paste0("model_event_",e,"_country_",c))
+                 print(c)
+                 print(e)
+                 
+                 yhat_neg_2 <- data.frame(predict(object = model_event,
+                                                  se.fit = TRUE,
+                                                  newdata = newdata_neg_2
+                 )) %>%
+                         select(fit,se.fit)
+                 yhat_neg_2$post <- -2
+                 
+                 yhat_0 <- data.frame(predict(object = model_event,
+                                              se.fit = TRUE,
+                                              newdata = newdata_0
+                 )) %>%
+                         select(fit,se.fit)
+                 yhat_0$post <- 0
+                 
+                 yhat_2 <- data.frame(predict(object = model_event,
+                                              se.fit = TRUE,
+                                              newdata = newdata_pos_2
+                 )) %>%
+                         select(fit,se.fit)
+                 yhat_2$post <- 2
+                 
+                 
+                 yhat_4 <- data.frame(predict(object = model_event,
+                                              se.fit = TRUE,
+                                              newdata = newdata_pos_4
+                 )) %>%
+                         select(fit,se.fit)
+                 yhat_4$post <- 4
+                 
+                 yhat <- rbind(yhat_neg_2,yhat_0,yhat_2,yhat_4)        
+                 yhat$event <- e
+                 yhat$country <- c
+                 df_yhat <- rbind(df_yhat,yhat)
+         }
+ }
[1] "NE-LSP"
[1] "t_p"
[1] "NE-LSP"
[1] "p_t"
[1] "NE-LSP"
[1] "u_p"
[1] "NE-LSP"
[1] "u_t"
[1] "IT"
[1] "t_p"
[1] "IT"
[1] "p_t"
[1] "IT"
[1] "u_p"
[1] "IT"
[1] "u_t"
There were 32 warnings (use warnings() to see them)
> 
> rm(list=ls(pattern="yhat_"))
> rm(list=ls(pattern="model"))
> rm(list=ls(pattern="newdata"))
> rm(list=ls(pattern="country"))
> rm(e,c,event,yhat)
> 
> # Save output ----
> 
> saveRDS(df_yhat, file = paste0(data_files, "df_yhat_first_base_age.rds"))
> beep()
> 
> 
> proc.time()
   user  system elapsed 
308.827  13.075 357.049 
