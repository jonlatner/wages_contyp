
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # TOP COMMANDS -----
> # https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/index/
> # https://stackoverflow.com/questions/7505547/detach-all-packages-while-working-in-r
> detachAllPackages <- function() {
+         basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
+         package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
+         package.list <- setdiff(package.list,basic.packages)
+         if (length(package.list)>0)  for (package in package.list) detach(package,character.only=TRUE)
+         
+ }
> detachAllPackages()
> rm(list=ls(all=TRUE))
> 
> # FOLDERS
> setwd("/Users/jonathanlatner/Google Drive/SECCOPA/")
> # setwd("C:/Users/ba1ks6/Google Drive/SECCOPA/")
> 
> data_files = "projects/mobility/data_files/"
> tables = "projects/mobility/tables/"
> graphs = "projects/mobility/graphs/"
> results = "projects/mobility/results/"
> 
> # LIBRARY
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.6     ✔ dplyr   1.0.4
✔ tidyr   1.1.2     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(texreg)
Version:  1.37.5
Date:     2020-06-17
Author:   Philip Leifeld (University of Essex)

Consider submitting praise using the praise or praise_interactive functions.
Please cite the JSS article in your publications -- see citation("texreg").

Attaching package: ‘texreg’

The following object is masked from ‘package:tidyr’:

    extract

> library(dummies)
dummies-1.5.6 provided by Decision Patterns

> library(robumeta) #group.center
> library(beepr)
> library(miceadds)
Loading required package: mice

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

* miceadds 3.11-6 (2021-01-21 11:48:47)
> library(broom)
> 
> options(scipen = 999) # disable scientific notation
> 
> # load data -----
> 
> df_original <- readRDS(paste0(data_files,"df_sample_first_clean.rds"))
> 
> # df_original <- readRDS(paste0(data_files,"df_sample_first_clean_sample.rds"))
> 
> # clean data -----
> 
> df_event_t_p <- df_original %>%
+         select(country,pid,year,ln_hourly_wage,unmp,temp,perm,age,matches("event_t_p")) %>%
+         rename(event_time_pos = event_t_p_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> df_event_u_p <- df_original %>%
+         select(country,pid,year,ln_hourly_wage,unmp,temp,perm,age,matches("event_u_p")) %>%
+         rename(event_time_pos = event_u_p_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> df_event_u_t <- df_original %>%
+         select(country,pid,year,ln_hourly_wage,unmp,temp,perm,age,matches("event_u_t")) %>%
+         rename(event_time_pos = event_u_t_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> df_event_p_t <- df_original %>%
+         select(country,pid,year,ln_hourly_wage,unmp,temp,perm,age,matches("event_p_t")) %>%
+         rename(event_time_pos = event_p_t_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> # examine some data ----
> 
> # df_test <- df_event_u_p %>%
> #         filter(event_u_p_yes==1 & country == "IT") %>%
> #         select(country,pid,year,unmp,temp,perm,matches("event"))
> # with(df_test,table(event_u_p_time,event_time_pos))
> 
> # df_event_t_p %>%
> #         filter(event_t_p_yes==1 & country == "IT") %>%
> #         select(country,pid,year,unmp,temp,perm,event_t_p,event_t_p_time,event_time_pos)
> 
> # df_test <- df_event_t_p %>%
> #         filter(event_t_p_yes==1 & country == "IT") %>%
> #         select(country,pid,year,unmp,temp,perm,event_t_p,event_t_p_time,event_time_pos)
> # with(df_test,table(event_t_p_time,event_time_pos))
> # with(df_event_t_p,table(country,event_t_p_yes))
> 
> # Prepare for models ----
> 
> df_yhat <- data.frame()
> 
> # Events - Temp to Perm (t_p), Perm to Temp (p_t), Unmp to Perm (u_p), and Unmp to Temp (p_t)
> 
> event <- c("t_p","p_t","u_p","u_t")
> 
> # Variables 
> 
> iv_vars_annual =   c("age + event_time_pos_1 + event_time_pos_3 + event_time_pos_4 + event_time_pos_5 + event_time_pos_6 + event_time_pos_7")
> iv_vars_biannual = c("age + event_time_pos_3 + event_time_pos_5 + event_time_pos_7")
> 
> vars_annual = c("ln_hourly_wage", "age", "event_time_pos_1", "event_time_pos_3", "event_time_pos_4", "event_time_pos_5", "event_time_pos_6", "event_time_pos_7")
> vars_biannual = c("ln_hourly_wage", "age", "event_time_pos_3", "event_time_pos_5", "event_time_pos_7")
> 
> # Countries
> country_bi <- c("NE-LSP","IT")
> country_ann <- c("AU","CH","DE","JP","KO","NE-LISS","UK")
> country_all <- c("AU","CH","DE","JP","KO","NE-LISS","UK","NE-LSP","IT")
> 
> # Models ---- 
> 
> # Biannual countries
> for(c in country_bi) {
+         print(paste0("country = ", c))
+         for (e in event) {
+                 print(paste0("event = ", e))
+                 df_event <- get(paste0("df_event_",e))
+                 
+                 df_country <- df_event %>%
+                         filter(country == c)
+                 
+                 # create year variables
+                 df_dummy <- dummy(x = df_country$year,sep = "")
+                 df_country <- cbind(df_country,df_dummy)
+                 
+                 df_dummy <- dummy(x = df_country$event_time_pos,sep = "_")
+                 df_country <- cbind(df_country,df_dummy)
+                 
+                 year <- sort(unique(df_country$year))
+                 year_vars = c()
+                 for(y in year) {
+                         year_vars <- c(year_vars,paste0("year",as.character(y)))
+                 }
+                 # remove_base_year_vars <- c(year_vars[1]) # drop baseline
+                 # year_vars <- year_vars [! year_vars %in% remove_base_year_vars]
+                 # year_vars
+                 
+                 # Prepare data for transitory exit with individual fixed effects 
+                 vars <- c(vars_biannual,year_vars)
+                 
+                 for (v in vars) {
+                         df_country$test <- group.center(df_country[[v]], df_country$pid)
+                         df_country$test <- as.numeric(df_country$test)
+                         df_country[[v]] <- NULL
+                         names(df_country)[names(df_country) == "test"] <- paste0(v)
+                 }
+                 
+                 # create independent variables
+                 vars_all = c()
+                 for (v in vars) {
+                         vars_all <- paste(vars_all,v,"+")
+                 }
+                 vars_all <- sub("..$", "", vars_all)
+                 
+                 # model
+                 df_country <- data.frame(df_country)
+                 model <- lm.cluster(as.formula(paste0("ln_hourly_wage ~ ",vars_all)),
+                                     cluster = df_country$pid,
+                                     data = df_country)
+                 
+                 assign(paste0("model_event_",e,"_country_",c),model)
+                 
+                 df_output <- tidy(model)
+                 df_output$event <- e
+                 df_output$country <- c
+                 df_yhat <- rbind(df_yhat,df_output)
+         }
+ }
[1] "country = NE-LSP"
[1] "event = t_p"
Loading required namespace: sandwich
Error: No tidy method for objects of class lm.cluster
In addition: Warning messages:
1: In model.matrix.default(~x - 1, model.frame(~x - 1), contrasts = FALSE) :
  non-list contrasts argument ignored
2: In model.matrix.default(~x - 1, model.frame(~x - 1), contrasts = FALSE) :
  non-list contrasts argument ignored
3: In model.matrix.default(mt, mf, contrasts) :
  the response appeared on the right-hand side and was dropped
4: In model.matrix.default(mt, mf, contrasts) :
  problem with term 1 in model.matrix: no columns are assigned
5: In model.matrix.default(x, data = list(ln_hourly_wage = c(0, -0.169453904408535,  :
  the response appeared on the right-hand side and was dropped
6: In model.matrix.default(x, data = list(ln_hourly_wage = c(0, -0.169453904408535,  :
  problem with term 1 in model.matrix: no columns are assigned
7: In model.matrix.default(x, data = list(ln_hourly_wage = c(0, -0.169453904408535,  :
  the response appeared on the right-hand side and was dropped
8: In model.matrix.default(x, data = list(ln_hourly_wage = c(0, -0.169453904408535,  :
  problem with term 1 in model.matrix: no columns are assigned
Execution halted
