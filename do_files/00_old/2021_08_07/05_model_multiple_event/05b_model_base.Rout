
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # TOP COMMANDS -----
> # https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/index/
> # https://stackoverflow.com/questions/7505547/detach-all-packages-while-working-in-r
> detachAllPackages <- function() {
+         basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
+         package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
+         package.list <- setdiff(package.list,basic.packages)
+         if (length(package.list)>0)  for (package in package.list) detach(package,character.only=TRUE)
+         
+ }
> detachAllPackages()
> rm(list=ls(all=TRUE))
> 
> # FOLDERS
> setwd("/Users/jonathanlatner/Google Drive/SECCOPA/")
> # setwd("C:/Users/ba1ks6/Google Drive/SECCOPA/")
> 
> data_files = "projects/mobility/data_files/"
> tables = "projects/mobility/tables/"
> graphs = "projects/mobility/graphs/"
> results = "projects/mobility/results/"
> 
> # LIBRARY
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.6     ✔ dplyr   1.0.4
✔ tidyr   1.1.2     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(texreg)
Version:  1.37.5
Date:     2020-06-17
Author:   Philip Leifeld (University of Essex)

Consider submitting praise using the praise or praise_interactive functions.
Please cite the JSS article in your publications -- see citation("texreg").

Attaching package: ‘texreg’

The following object is masked from ‘package:tidyr’:

    extract

> library(dummies)
dummies-1.5.6 provided by Decision Patterns

> library(robumeta) #group.center
> library(beepr)
> library(estimatr)
> library(broom)
> 
> options(scipen = 999) # disable scientific notation
> 
> # load data -----
> 
> df_original <- readRDS(paste0(data_files,"df_sample_multiple_clean.rds"))
> 
> # df_original <- readRDS(paste0(data_files,"df_sample_multiple_clean_sample.rds"))
> 
> # clean data -----
> 
> df_event_t_p <- df_original %>%
+         select(country,pid,year,age,ln_hourly_wage,unmp,temp,perm,matches("event_t_p")) %>%
+         rename(event_time_pos = event_t_p_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> df_event_u_p <- df_original %>%
+         select(country,pid,year,age,ln_hourly_wage,unmp,temp,perm,matches("event_u_p")) %>%
+         rename(event_time_pos = event_u_p_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> df_event_u_t <- df_original %>%
+         select(country,pid,year,age,ln_hourly_wage,unmp,temp,perm,matches("event_u_t")) %>%
+         rename(event_time_pos = event_u_t_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> df_event_p_t <- df_original %>%
+         select(country,pid,year,age,ln_hourly_wage,unmp,temp,perm,matches("event_p_t")) %>%
+         rename(event_time_pos = event_p_t_time_pos) %>%
+         filter(!is.na(event_time_pos))
> 
> # examine some data ----
> 
> # df_test <- df_event_u_p %>%
> #         filter(event_u_p_yes==1 & country == "IT") %>%
> #         select(country,pid,year,unmp,temp,perm,matches("event"))
> # with(df_test,table(event_u_p_time,event_time_pos))
> 
> # df_event_t_p %>%
> #         filter(event_t_p_yes==1 & country == "IT") %>%
> #         select(country,pid,year,unmp,temp,perm,event_t_p,event_t_p_time,event_time_pos)
> # 
> 
> # Prepare for models ----
> 
> df_yhat <- data.frame()
> 
> # Events - Temp to Perm (t_p), Perm to Temp (p_t), Unmp to Perm (u_p), and Unmp to Temp (p_t)
> 
> event <- c("t_p","p_t","u_p","u_t")
> 
> # Variables 
> 
> iv_vars_annual =   c("event_time_pos_1 + event_time_pos_3 + event_time_pos_4 + event_time_pos_5 + event_time_pos_6 + event_time_pos_7")
> iv_vars_biannual = c("event_time_pos_3 + event_time_pos_5 + event_time_pos_7")
> 
> vars_annual = c("ln_hourly_wage", "event_time_pos_1", "event_time_pos_3", "event_time_pos_4", "event_time_pos_5", "event_time_pos_6", "event_time_pos_7")
> vars_biannual = c("ln_hourly_wage", "event_time_pos_3", "event_time_pos_5", "event_time_pos_7")
> 
> # Countries
> country_bi <- c("NE-LSP","IT")
> country_ann <- c("AU","CH","DE","JP","KO","NE-LISS","UK")
> country_all <- c("AU","CH","DE","JP","KO","NE-LISS","UK","NE-LSP","IT")
> 
> # Models ---- 
> 
> # Annual countries
> for(c in country_ann) {
+         print(paste0("country = ", c))
+         for (e in event) {
+                 print(paste0("event = ", e))
+                 df_event <- get(paste0("df_event_",e))
+                 
+                 df_country <- df_event %>%
+                         filter(country == c)
+                 
+                 # create year variables
+                 df_dummy <- dummy(x = df_country$year,sep = "")
+                 df_country <- cbind(df_country,df_dummy)
+                 
+                 df_dummy <- dummy(x = df_country$event_time_pos,sep = "_")
+                 df_country <- cbind(df_country,df_dummy)
+                 
+                 year <- sort(unique(df_country$year))
+                 year_vars = c()
+                 for(y in year) {
+                         year_vars <- c(year_vars,paste0("year",as.character(y)))
+                 }
+                 remove_base_year_vars <- c(year_vars[1]) # drop baseline
+                 year_vars <- year_vars [! year_vars %in% remove_base_year_vars]
+                 year_vars
+                 
+                 # Prepare data for transitory exit with individual fixed effects 
+                 vars <- c(vars_annual,year_vars)
+ 
+                 for (v in vars) {
+                         df_country$test <- group.center(df_country[[v]], df_country$pid)
+                         df_country$test <- as.numeric(df_country$test)
+                         df_country[[v]] <- NULL
+                         names(df_country)[names(df_country) == "test"] <- paste0(v)
+                 }
+                 
+                 # create independent variables
+                 vars_all = c()
+                 for (v in vars) {
+                         vars_all <- paste(vars_all,v,"+")
+                 }
+                 vars_all <- sub("..$", "", vars_all)
+                 
+                 # model
+                 df_country <- data.frame(df_country)
+                 model <- lm_robust(as.formula(paste0("ln_hourly_wage ~ ",vars_all)),
+                                    clusters = pid, 
+                                    se_type = "stata",
+                                    data = df_country)
+                 
+                 assign(paste0("model_event_",e,"_country_",c),model)
+                 
+                 df_output <- tidy(model)
+                 df_output$event <- e
+                 df_output$country <- c
+                 df_yhat <- rbind(df_yhat,df_output)
+         }
+ }
[1] "country = AU"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = CH"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = DE"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = JP"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = KO"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = NE-LISS"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = UK"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> 
> # Biannual countries
> for(c in country_bi) {
+         print(paste0("country = ", c))
+         for (e in event) {
+                 print(paste0("event = ", e))
+                 df_event <- get(paste0("df_event_",e))
+                 
+                 df_country <- df_event %>%
+                         filter(country == c)
+                 
+                 # create year variables
+                 df_dummy <- dummy(x = df_country$year,sep = "")
+                 df_country <- cbind(df_country,df_dummy)
+                 
+                 df_dummy <- dummy(x = df_country$event_time_pos,sep = "_")
+                 df_country <- cbind(df_country,df_dummy)
+                 
+                 year <- sort(unique(df_country$year))
+                 year_vars = c()
+                 for(y in year) {
+                         year_vars <- c(year_vars,paste0("year",as.character(y)))
+                 }
+                 remove_base_year_vars <- c(year_vars[1]) # drop baseline
+                 year_vars <- year_vars [! year_vars %in% remove_base_year_vars]
+                 year_vars
+                 
+                 # Prepare data for transitory exit with individual fixed effects 
+                 vars <- c(vars_biannual,year_vars)
+                 
+                 for (v in vars) {
+                         df_country$test <- group.center(df_country[[v]], df_country$pid)
+                         df_country$test <- as.numeric(df_country$test)
+                         df_country[[v]] <- NULL
+                         names(df_country)[names(df_country) == "test"] <- paste0(v)
+                 }
+                 
+                 # create independent variables
+                 vars_all = c()
+                 for (v in vars) {
+                         vars_all <- paste(vars_all,v,"+")
+                 }
+                 vars_all <- sub("..$", "", vars_all)
+                 
+                 # model
+                 df_country <- data.frame(df_country)
+                 model <- lm_robust(as.formula(paste0("ln_hourly_wage ~ ",vars_all)),
+                                    clusters = pid, 
+                                    se_type = "stata",
+                                    data = df_country)
+                 
+                 assign(paste0("model_event_",e,"_country_",c),model)
+                 
+                 df_output <- tidy(model)
+                 df_output$event <- e
+                 df_output$country <- c
+                 df_yhat <- rbind(df_yhat,df_output)
+         }
+ }
[1] "country = NE-LSP"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
[1] "country = IT"
[1] "event = t_p"
[1] "event = p_t"
[1] "event = u_p"
[1] "event = u_t"
There were 32 warnings (use warnings() to see them)
> 
> rm(list=ls(pattern="vars"))
> rm(c,e,v,y,year,df_country,df_event,df_dummy,model)
> 
> # Save output ----
> 
> saveRDS(df_yhat, file = paste0(data_files, "df_yhat_multiple_base.rds"))
> 
> # Tables ----
> 
> # Individual countries - annual
> for(c in country_ann) {
+         
+         model_event_t_p_country <- get(paste0("model_event_t_p_country_",c))
+         model_event_u_p_country <- get(paste0("model_event_u_p_country_",c))
+         model_event_u_t_country <- get(paste0("model_event_u_t_country_",c))
+         model_event_p_t_country <- get(paste0("model_event_p_t_country_",c))
+         
+         # screenreg(list(model_event_t_p_country,model_event_t_p_country,model_event_u_p_country,model_event_u_t_country),
+         #        custom.model.names = c("Event 1 (T-P)", "Event 4 (P-T)", "Event 2 (U-P)", "Event 3 (U-T)"),
+         #        custom.coef.names = c("Pre event (-2)", "Pre event (-1)", "Event", "Post event (+1)", "Post event (+2)", "Post event (+3)", "Post event (+4)"),
+         #        table = FALSE,include.ci = FALSE,
+         #        include.rsquared = TRUE, include.adjrs = FALSE,include.nobs = TRUE,include.rmse=FALSE,include.groups=FALSE,
+         #        omit.coef = c("year|Intercept"))
+         
+         texreg(list(model_event_t_p_country,model_event_p_t_country,model_event_u_p_country,model_event_u_t_country),
+                custom.model.names = c("Event 1 (T-P)", "Event 4 (P-T)", "Event 2 (U-P)", "Event 3 (U-T)"),
+                custom.coef.names = c("Pre event (-2)", "Event", "Post event (+1)", "Post event (+2)", "Post event (+3)", "Post event (+4)"),
+                file = paste0(tables,"table_model_1_multiple_output_country_",c,".tex"),
+                table = FALSE,include.ci = FALSE,
+                custom.note = c("%stars. Note: Reference event is Pre event (-1).  SE are cluster robust."),
+                include.rsquared = TRUE, include.adjrs = FALSE,include.nobs = TRUE,include.rmse=FALSE,include.groups=FALSE,
+                omit.coef = c("year|Intercept"))
+ }
The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_country_AU.tex'.

The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_country_CH.tex'.

The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_country_DE.tex'.

The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_country_JP.tex'.

The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_country_KO.tex'.

The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_country_NE-LISS.tex'.

The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_country_UK.tex'.

> 
> # Individual countries - biannual
> for(c in country_bi) {
+         
+         model_event_t_p_country <- get(paste0("model_event_t_p_country_",c))
+         model_event_u_p_country <- get(paste0("model_event_u_p_country_",c))
+         model_event_u_t_country <- get(paste0("model_event_u_t_country_",c))
+         model_event_p_t_country <- get(paste0("model_event_p_t_country_",c))
+         
+         texreg(list(model_event_t_p_country,model_event_p_t_country,model_event_u_p_country,model_event_u_t_country),
+                custom.model.names = c("Event 1 (T-P)", "Event 4 (P-T)", "Event 2 (U-P)", "Event 3 (U-T)"),
+                custom.coef.names = c("Event", "Post event (+2)", "Post event (+4)"),
+                file = paste0(tables,"table_model_1_multiple_output_country_",c,".tex"),
+                table = FALSE,include.ci = FALSE,
+                custom.note = c("%stars. Note: Reference event is Pre event (-1).  SE are cluster robust."),
+                include.rsquared = TRUE, include.adjrs = FALSE,include.nobs = TRUE,include.rmse=FALSE,include.groups=FALSE,
+                omit.coef = c("year|Intercept"))
+ }
The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_country_NE-LSP.tex'.

The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_country_IT.tex'.

> 
> # Event by countries
> for (e in event) {
+         for(c in country_all) {
+                 
+                 model_event_country <- get(paste0("model_event_",e,"_country_",c))
+                 assign(paste0("model_",c),model_event_country)
+                 
+         }
+         
+         texreg(list(model_AU,model_CH,model_DE,model_JP,model_KO,`model_NE-LISS`,model_UK,`model_NE-LSP`,model_IT),
+                custom.model.names = c("AU", "CH", "DE", "JP", "KO", "NE-LISS", "UK", "NE-LSP","IT"),
+                custom.coef.names = c("Pre event (-2)", "Event", "Post event (+1)", "Post event (+2)", "Post event (+3)", "Post event (+4)"),
+                file = paste0(tables,"table_model_1_multiple_output_event_",e,".tex"),
+                table = FALSE,include.ci = FALSE,
+                custom.note = c("%stars. Note: Reference event is Pre event (-1).  SE are cluster robust."),
+                include.rsquared = TRUE, include.adjrs = FALSE,include.nobs = TRUE,include.rmse=FALSE,include.groups=FALSE,
+                omit.coef = c("year|Intercept"))
+ }
The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_event_t_p.tex'.

The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_event_p_t.tex'.

The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_event_u_p.tex'.

The table was written to the file 'projects/mobility/tables/table_model_1_multiple_output_event_u_t.tex'.

> 
> # rm(list=ls(pattern="model"))
> # rm(list=ls(pattern="country"))
> # rm(e,c,event)
> 
> beep()
> 
> 
> proc.time()
   user  system elapsed 
473.477  17.830 692.358 
