
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # TOP COMMANDS -----
> # https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/index/
> # https://stackoverflow.com/questions/7505547/detach-all-packages-while-working-in-r
> detachAllPackages <- function() {
+         basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
+         package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
+         package.list <- setdiff(package.list,basic.packages)
+         if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
+         
+ }
> detachAllPackages()
> rm(list=ls(all=TRUE))
> 
> # FOLDERS
> setwd("/Users/jonathanlatner/OneDrive/SECCOPA/projects/wage_mobility/")
> 
> data_files = "data_files/"
> 
> # LIBRARY
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.6     ✔ dplyr   1.0.8
✔ tidyr   1.2.0     ✔ stringr 1.4.0
✔ readr   2.1.2     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(zoo)

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> library(Hmisc)
Loading required package: lattice
Loading required package: survival
Loading required package: Formula

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:dplyr’:

    src, summarize

The following objects are masked from ‘package:base’:

    format.pval, units

> library(data.table)

Attaching package: ‘data.table’

The following objects are masked from ‘package:dplyr’:

    between, first, last

The following object is masked from ‘package:purrr’:

    transpose

> library(beepr)
> 
> options(scipen = 999) # disable scientific notation
> 
> # Load data -----
> 
> df_sample_0 <- readRDS(file = paste0(data_files, "03a_df_sample.rds"))
> 
> df_sample_1 <- df_sample_0
> 
> # Clean wages ----
> 
> # If unemployed, then wages == 0
> df_sample_1 <- df_sample_1 %>%
+         mutate(
+                 wages = ifelse(unmp==1, yes = 0, no = wages),
+                 ln_wages = log(wages),
+                 ln_wages = ifelse(wages == 0 & unmp==1, yes = 0, no = ln_wages),
+                 hourly_wage = ifelse(unmp==1, yes = 0, no = hourly_wage),
+                 ln_hourly_wage = log(hourly_wage),
+                 ln_hourly_wage = ifelse(hourly_wage == 0 & unmp==1, yes = 0, no = ln_hourly_wage),
+                 hourly_wage_dollars = ifelse(unmp==1, yes = 0, no = hourly_wage_dollars),
+                 ln_hourly_wage_dollars = log(hourly_wage_dollars),
+                 ln_hourly_wage_dollars = ifelse(hourly_wage_dollars == 0 & unmp==1, yes = 0, no = ln_hourly_wage_dollars),
+         )
> 
> # Clean employment status ----
> 
> # If unemployed, then no work contract (temp or permanent)
> # recode employment status (0=unemployed; 1=temp contract; 2=perm contract; 3=temp, not not FTC)
> df_sample_1 <- df_sample_1 %>%
+         mutate(emp_status = ifelse(unmp == 1, yes = 0, no = emp_status),
+                perm = ifelse(unmp==0 & emp_status==1, yes = 1, no = 0),
+                temp = ifelse(unmp==0 & emp_status==2, yes = 1, no = 0))
> 
> # determine minimum difference between sample periods (i.e. annual or biannual)
> df_sample_1 <- df_sample_1 %>%
+         group_by(country, pid) %>%
+         mutate(year_lag = year - lag(year,1,default = NA)) %>%
+         group_by(country) %>%
+         mutate(year_lag = min(year_lag,na.rm = TRUE)) %>%
+         ungroup()
> 
> # Save data sets ----
> 
> saveRDS(df_sample_1, file = paste0(data_files, "03b_df_sample_cleaned.rds"))
> 
> beep()
> 
> proc.time()
   user  system elapsed 
 17.785   0.801  19.351 
